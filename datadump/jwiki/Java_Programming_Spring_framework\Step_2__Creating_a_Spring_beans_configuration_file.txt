https://en.wikibooks.org/wiki/Java_Programming/Spring_framework#Step_2:_Creating_a_Spring_beans_configuration_file
Java Programming/Spring framework - Step 2: Creating a Spring beans configuration file
Create a new XML file in the directory where you are planning to put your java files. Call it story_configuration.xml. Then copy and paste the text below into the file and save it:The first two lines are just standard XML declarations. Technically we don't really need them, but we'll put them in anyway. Next, you'll see the <beans> tag, this is where all the Java beans go.Below that you'll see <bean class="spring.StoryList">. This will be a bean for our Java class, StoryList.java in package spring. This class is simply a placeholder for the List where we will be holding our stories. Note the attributes of the bean element: there must always be a class attribute to represent the Java Class the bean is using. The id attribute is optional; it is used by the XMLBeanFactory class, to tell it what bean to get with the getBean method: ex. getBean("My id attribute name here"). If no ID attribute is provided, like with <bean class="StoryList">, the class name is used as if it were the id attribute. Think: <bean id="StoryList" class="spring.StoryList">. Also note a bean's id value must not have any spaces, ex. don't write id="Story List".Next we have <property name="stories">. The property tag just specifies what property variable in the Java bean file we want to specify with a bean property. The <list> tag is used next to tell Spring that we're dealing with a List of things, not just one. Next we have <ref bean="HelloWorld"/>, this tells Spring to return the <bean id="HelloWorld" class="spring.Story"> bean inside this List. In a different example, you might simply need a list of values like Strings. For a grocery list you might have something like,Either way your property is mapped to a LISTFor our HelloWorld story, we have <bean id="HelloWorld" class="spring.Story">. Hopefully, nothing too surprising here. There are three properties of this bean, <property name="title">, <property name="author">, <property name="content">. These are again mapping to property variables: title, author, content in the Story class. Within each value we have: <value>Hello World!</value>, <value>User:Hyad</value>, <value>This is a simple story.This is a story about a man who said, "Hello, World."See, now wasn't that simple.</value> Since we are dealing with Strings, everything between the start and end value tags is converted into a String. Hence to add a newline, we must actually put text on separate lines without any indentation. Be aware that values don't have to be mapped to Strings, they can be primitives like int or char, or objects like Integer or Float. Spring automatically knows how to convert them.We won't be covering the OnceUpon bean, it's essentially the same thing as HelloWorld, only with different values. In fact, that is the main purpose for using Spring, storing different sets of values for a Java class as a bean instead of making a new class. Up next are the Java Bean classes themselves.