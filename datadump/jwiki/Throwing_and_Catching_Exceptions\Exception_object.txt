https://en.wikibooks.org/wiki/Java_Programming/Throwing_and_Catching_Exceptions#Exception_object
Throwing and Catching Exceptions - Exception object
The preceding exception could have been created explicitly by the developer as it is the case in the following code:Note that when b equals zero, there is no return value. Instead of a java.lang.ArithmeticException generated by the Java interpreter itself, it is an exception created by the coder. The result is the same. It shows you that an exception is an object. Its main particularity is that it can be thrown. An exception object must inherit from java.lang.Exception. Standard exceptions have two constructors:This string can later be extracted using various methods, as you can see in the code listing 6.2.You can throw any type of Throwable object using the keyword throw. It interrupts the method. Anything after the throw statement would not be executed, unless the thrown exception is handled. The exception object is not returned from the method, it is thrown from the method. That means that the exception object is not the return value of the method and the calling method can be interrupted too and so on and so on...Typically, you'll throw a different class of exception for each different type of error. The information about the error is represented both inside the exception object and implicitly in the name of the exception class, so someone in the bigger context can figure out what to do with your exception. Often, the only information is the type of exception, and nothing meaningful is stored within the exception object.The box 6.1 below talks about the various exception classes within the java.lang package.