<html>
    <head>

        <script src="/js/explain.js"></script>
        <title>Question</title>
        <% test = Question._id; %>
        <script>
            var arrayGivenBy = <%=JSON.stringify(Upvote.givenById)%>;
            var uid = <%=Userid%>
            var qid = <%= test  %>;  //var test is now assigned to getTest which will only work on browsers
            console.log("user" + uid );
            console.log(qid);  // successfully prints 101 on browser
            var numExplains=5;
            </script>

        <!--Common-->
        <link href='http://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,600,700' rel='stylesheet' type='text/css'>
        <script src="/js/tether.min.js"></script>
        <link rel="stylesheet" href="/stylesheets/bootstrap.min.css">
        <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js"></script>

        <!-- Layout formatting -->
        <link rel="stylesheet" href="/stylesheets/layout.css">
        <!-- Theme formatting -->
        <link rel="stylesheet" href="/stylesheets/theme.css">

        <!--Tree structure-->
        <script src="/js/tree.jquery.js"></script>
        <link rel="stylesheet" href="/stylesheets/jqtree.css">
        <script src="/js/creco.js"></script>

        <link rel="stylesheet" href="/stylesheets/jquery-ui.css">
        <script src="//code.jquery.com/jquery-1.10.2.js"></script>
        <script src="//code.jquery.com/ui/1.11.4/jquery-ui.js"></script>
        <!-- <link rel="stylesheet" href="/resources/demos/style.css"> -->
		<style>
		.ui-widget-content a.svellang {
		    color: #428bca !important;
		}
		</style>
        <script>


            $(function() {
    				$("#voteContainer").hide();
                });
                function toggleExplanation(btn){
                if($("#voteContainer").is(":visible")){
                $("#voteContainer").hide();
                $(btn).val("View explanations");
                }
                else{
                $("#voteContainer").show();
                $(btn).val("Hide explanations");
                }
                }
                function showMore(){
                numExplains+=5;
                if(numExplains>=$(".explainList").length)
                $("#btnShowMore").attr("disabled",true);
                $( ".explainList" ).each(function( index ) {
                if(index>=numExplains)
                $(this).hide();
                else
                $(this).show();
                });
                }


      function populateRecos(recommendations){
			//TODO: Populate UI
			  var divContent = "";
				for(i=0;i<recommendations.length;i++){
					divContent+="<h3>"+recommendations[i].concept+"</h3>";
					divContent+="<div><p><a class='svellang' href='"+recommendations[i].link+"' target='_blank'>"+recommendations[i].link+"</a></p>";
					divContent+="<p>"+recommendations[i].conceptDesc+"</p></div>";
				}
				//Reload accordion
				$("#recommendations").html(divContent);
				$(function() {
					 $( ".accordion" ).accordion({
 						collapsible: true,
 						active:false,
 						heightStyle: "content"
 					});
				});
			}

      var crecoConcept = "<%= Question.concept %>";
      var crecoDesc = '<%=JSON.stringify(Question.text)%>';
      // Remove & from desc because that is URL special character
      crecoDesc = crecoDesc.replace(/&#34;/g,"");
      crecoDesc = crecoDesc.replace(/&amp;/g,"");
      crecoDesc = crecoDesc.replace(/&/g,"");
      crecoDesc = crecoDesc.replace(/[+]/g,"");
      console.log("Concept:"+crecoConcept);
      console.log("Desc:"+crecoDesc);

      var recommendations = [];
      function getRecommendations(recos){
        if(recos.response.docs.length > 0){
          for(var i = 0; i < recos.response.docs.length; ++i)
          {
            recommendations.push(recos.response.docs[i]);
          }
        }
        populateRecos(recommendations);
      }

      search(crecoConcept, crecoDesc, 5, getRecommendations);

      </script>


    </head>
    <body>
        <%
            inputType=Question.answers.length>1?"checkbox":"radio";
            hintDisabled="disabled";
            studentAnswered=[1,2];
            mode=0;//0: attempt, 1: view_result
            %>
        <nav class="navbar navbar-default">
            <div class="container-fluid">
                <!-- Brand and toggle get grouped for better mobile display -->
                <div class="navbar-header">
                    <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1" aria-expanded="false">
                        <span class="sr-only">Toggle navigation</span>
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                    </button>
                    <a class="navbar-brand" href="/">AdaptQ</a>
                </div>

                <!-- Collect the nav links, forms, and other content for toggling -->
                <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
                    <ul class="nav navbar-nav">
                    </ul>
                    <!--<form class="navbar-form navbar-left" role="search">
                     <div class="form-group">
                     <input type="text" class="form-control" placeholder="Search">
                     </div>
                     <button type="submit" class="btn btn-default">Submit</button>
                     </form>-->
                    <ul class="nav navbar-nav navbar-right">
                        <li><a href="/logout">Sign Out</a></li>
                    </ul>
                </div><!-- /.navbar-collapse -->
            </div><!-- /.container-fluid -->
        </nav>
          <%
            text=Question.text.replace(/\n/g, "<br/>");
            text=text.replace(/ /g, '\u00a0')
            %>


        <div class="container-fluid content">
            <form method="post" action="/Question" id="attempt" name="attempt">
                <input type="hidden" name="id" value = <%=Question._id%> >

                    <div class="form-group">
                        <!-- <label for="question"> --><!-- <h1>Question</h1> --><!-- </label> -->
                        <h1><%-text%></h1>
                        <!-- <textarea class="form-control" rows="5" id="question" placeholder="Enter your question" name="question"></textarea> -->
                    </div>

                    <br/>
                    <div id="options">

                        <% for(var i=0; i < Question.options.length; i++) {
                            var color="";
                            var tooltip="";
                            var arrActualOptions = Question.answers;
                            var givenAns = JSON.stringify(Attempt.givenAns);
                            var checked="";
                            if(arrActualOptions.indexOf(i)>-1 && givenAns.indexOf(i)>-1){
                                color="correct";
                                tooltip="data-toggle=tooltip data-placement=auto title=Correct";
                                checked="checked";
                            }
                            if(arrActualOptions.indexOf(i)>-1 && givenAns.indexOf(i)<0){
                                color="warning";
                                tooltip="data-toggle=tooltip data-placement=auto title=Missed";
                            }
                            if(arrActualOptions.indexOf(i)<0 && givenAns.indexOf(i)>-1){
                                color="incorrect";
                                tooltip="data-toggle=tooltip data-placement=auto title=Incorrect";
                                checked="checked";
                            }
                        %>
                        <div class="option input-group" <%=tooltip%>>
                            <span class="input-group-addon <%=color%>">
                                <input type=<%=inputType%> name="options" id="option<%=i%>" class="checko" disabled <%=checked%>>
                            </span>
                            <label for="option<%=i%>" class="form-control optiono disabled"><%=Question.options[i]%></label>
                        </div> <!-- ./input-group -->
                        <% } %>



                    </div>
                    <br>
                    <div class="buttons">
                        <input type="button" class="btn btn-primary" value="View explanations"  onclick="toggleExplanation(this)" >
                    </div> <!-- /.buttons -->

                    <div id="voteContainer">
                        <div id="voteList">
                        </div> <!-- /.voteList -->

                        <input type="button" class="btn btn-primary-outline" id="btnShowMore" value="Show more" onclick="showMore()">


                            <div id="explanatory">
                                <div class="form-group"><br/>
                                    <label for="explainationGiven" class="svellang">Add explanation</label>
                                    <textarea class="form-control" rows="3" id="explainationGiven" placeholder="Provide your explanation here" name="explainationGiven"></textarea>
                                </div>
                                <div class="buttons">
                                    <input type="button" class="btn btn-primary" value="Submit" onclick="sub()">
                                        <input type="reset" class="btn btn-primary-outline" value="Clear Form" onclick="clearForm()">
                                </div> <!-- /.buttons -->
                            </div> <!-- /.explanatory -->

                    </div><!-- /.voteContainer -->


            </form>
        </div> <!-- /.container-fluid -->



        <div class="container-fluid content-lite">
            <label class="svellang">Recommendations</label>
            <div id="recommendations" class="accordion" role="tablist"><h3>JavaSpaces</h3><div><p><a class="svellang" href="https://en.wikibooks.org/wiki/Java_Programming/JavaSpaces">https://en.wikibooks.org/wiki/Java_Programming/JavaSpaces</a></p><p> After J2EE, Sun had a vision about the next step of network computing: in a network environment, there would be many independent services and consumers. That is JavaSpaces. JavaSpaces would allow these services/consumers to interact dynamically with each other in a robust way. It can be viewed as an object repository that provides a distributed persistent object exchange mechanism (persistent can be in memory or disk) for Java objects. It can be used to store the system state and implement distributed algorithms. In a JavaSpace, all communication partners (peers) communicate by sharing state. It is an implementation of the Tuple spaces idea.JavaSpaces is used when someone wants to achieve scalability and availability and at the same time reducing the complexity of the overall system.Processes perform simple operations to write new objects into a JavaSpace, take objects from a JavaSpace, or read (make a copy of) objects from the JavaSpace.In conventional applications, objects are assembled from the database before presenting to the end user. In JavaSpace applications, we keep the ready made "end user" objects and store them in the JavaSpace. In JavaSpace applications the services are decoupled from each other; they communicate through objects that they write and read/take from the JavaSpace. Services search for objects that they want to take or read from the Space by using template object.</p></div><h3>Classes, Objects and Types</h3><div><p><a class="svellang" href="https://en.wikibooks.org/wiki/Java_Programming/Classes,_Objects_and_Types">https://en.wikibooks.org/wiki/Java_Programming/Classes,_Objects_and_Types</a></p><p> An object is composed of fields and methods. The fields, also called data members, characteristics, attributes, or properties, describe the state of the object. The methods generally describe the actions associated with a particular object. Think of an object as a noun, its fields as adjectives describing that noun, and its methods as the verbs that can be performed by or on that noun.For example, a sports car is an object. Some of its fields might be its height, weight, acceleration, and speed. An object's fields just hold data about that object. Some of the methods of the sports car could be "drive", "park", "race", etc. The methods really don't mean much unless associated with the sports car, and the same goes for the fields.The blueprint that lets us build our sports car object is called a class. A class doesn't tell us how fast our sports car goes, or what color it is, but it does tell us that our sports car will have a field representing speed and color, and that they will be say, a number and a word (or hex color code), respectively. The class also lays out the methods for us, telling the car how to park and drive, but these methods can't take any action with just the blueprint — they need an object to have an effect.In Java, a class is located in a file similar to its own name. If you want to have a class called SportsCar, its source file needs to be SportsCar.java. The class is created by placing the following in the source file:The class doesn't do anything yet, as you will need to add methods and field variables first.The objects are different from the primitive types because:</p></div></div>
        </div> <!-- /.container-fluid -->
    </body>
    <script src="/js/explain.js"></script>
</html>
